@page "/templates/{TemplateId}/"
@using iTFORMS.IServices
@inject HttpClient Http
@rendermode InteractiveServer
@inject ITemplateService TemplateService

<div class="container-fluid" style="background-color: #f0ebf8;">
    <div class="container p-4">
        <div class="row">
        <div class="nav nav-tabs mb-4 col-lg-8">
            <a class="nav-link @GetTabClass("settings")"
                    href="/templates/@TemplateId/"
                    @onclick="@(() => {
                    ActiveTab = "settings";
                    StateHasChanged();
                    })">
                Settings
            </a>
            <a class="nav-link @GetTabClass("questions")" 
                    href="/templates/@TemplateId/#questions"
                    @onclick="@(() => {
                    ActiveTab = "questions";
                    StateHasChanged();
                    })">
                Questions
            </a>
            <a class="nav-link @GetTabClass("responses")"
                    href="/templates/@TemplateId/#responses" 
                    @onclick="@(() => {
                    ActiveTab = "responses";
                    StateHasChanged();
                    })">
                Responses
            </a>
        </div>
        <div class="col-lg-2 offset-2 d-flex justify-content-end align-items-center">
            <button @onclick="PublishTemplate" class="btn btn-primary w-100" style="font-size: 19px;">Publish</button>
        </div>
        </div>

        <!-- Tab Content -->
        <div class="tab-content">
            @if (ActiveTab == "settings")
            {
                <TemplateSettings Topics="@Topics" 
                                Template="@template" 
                                OnSave="HandleSave" 
                                ShowModal="@showModal" 
                                ShowModalChanged="@((value) => showModal = value)"/>
            }
            else if (ActiveTab == "questions")
            {
                <TemplateQuestions @ref="questionsComponent" 
                                  Template="@template" 
                                  OnQuestionsUpdated="HandleQuestionsUpdate"/>
            }
            else if (ActiveTab == "responses")
            {
                <TemplateResponses TemplateId="@TemplateId" />
            }
        </div>
    </div>

</div>

<style>
    .nav-link {
        color: black;
    }

    .nav-link:hover {
        color: #683ab7;
    }

    .active {
        background-color: transparent !important;
        border: transparent !important;
        border-bottom: 2px solid black !important;
    }
</style>

@code {
    [Parameter] public string? TemplateId { get; set; }
    private Template template = new();
    private List<Topic> Topics = new List<Topic>();

    private string ActiveTab = "settings";
    private TemplateQuestions? questionsComponent;
    private bool showModal = false;
    

    private string GetTabClass(string tabName) => 
        ActiveTab == tabName ? "active" : "";

    private void HandleSave()
    {
        try
        {
            showModal = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating template settings: {ex.Message}");
        }
    }

    private async Task PublishTemplate()
    {
        try
        {
            if (string.IsNullOrEmpty(template.Description) || string.IsNullOrEmpty(template.Title))
            {
                Console.WriteLine("Please fill in the required fields.");
                return;
            }
            template.AuthorId = "";
            await TemplateService.PublishTemplateAsync(template);
            Console.WriteLine("Template published successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error publishing template: {ex.Message}");
        }
    }
        
    public void HandleQuestionsUpdate(List<Question> updatedQuestions) {
        template.Questions = new List<Question>(updatedQuestions);
        StateHasChanged();
    }
}