@using iTFORMS.Models.Enums

<!-- TemplateQuestions.razor -->
<div class="card col-lg-8 offset-2" style="background-color: transparent; border:none ">
    <div class="card-body">
        <div>
            <QuestionEditor
                    Questions="Template.Questions"
                    OnDelete="DeleteQuestion"
                    QuestionsChanged="OnQuestionsUpdated" />
            
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Template Template { get; set; }
    [Parameter] public EventCallback OnPublish { get; set; }

    [Parameter]
    public EventCallback<List<Question>> OnQuestionsUpdated { get; set; }

    public Question newQuestion = new Question();
    private QuestionEditor? questionEditorRef;

    private bool showQuestionCreator = false;
    private bool showAddNewBtn = true;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            showAddNewBtn = Template.Questions == null || !Template.Questions.Any();
            Console.WriteLine(Template.Questions != null ? Template.Questions.Count: "null");
            StateHasChanged();
        }
    }

    private async Task SaveNewQuestion(Question newQuestion)
    {
        if (Template.Questions == null)
        {
            Template.Questions = new List<Question>();
        }

        // Set proper order
        newQuestion.Order = Template.Questions.Any() 
            ? Template.Questions.Max(q => q.Order) + 1 
            : 1;

        newQuestion.TemplateId = Template.TemplateId;
        Template.Questions.Add(newQuestion);
        
        await OnQuestionsUpdated.InvokeAsync(Template.Questions);
        showQuestionCreator = false;
        showAddNewBtn = false;
        StateHasChanged();
    }
    
    private void DeleteQuestion(Question question)
    {
        Template.Questions.Remove(question);
        StateHasChanged();
    }
}