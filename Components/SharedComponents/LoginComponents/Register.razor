@page "/register"
@using Microsoft.AspNetCore.Identity
@using iTFORMS.Models
@inject NavigationManager Navigation
@inject UserManager<User> UserManager
@rendermode InteractiveServer

<div class="login-container">
    <div class="login-box">
        <h2>Register</h2>
        <div class="form-group">
            <div class="form-group">
                <label for="firstName">First Name</label>
                <input id="firstName" class="form-control" 
                    @bind-value="firstName" 
                    @bind-value:event="oninput" />
            </div>

            <div class="form-group">
                <label for="lastName">Last Name</label>
                <input id="lastName" class="form-control" 
                    @bind-value="lastName" 
                    @bind-value:event="oninput" />
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <input id="email" class="form-control" 
                    @bind-value="email" 
                    @bind-value:event="oninput" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <input id="password" type="password" class="form-control" 
                    @bind-value="password" 
                    @bind-value:event="oninput" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <input id="confirmPassword" type="password" class="form-control" 
                    @bind-value="confirmPassword" 
                    @bind-value:event="oninput" />
            </div>

            <button type="button" class="btn btn-primary" @onclick="HandleRegister">
                Register
            </button>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <div class="signup-link">
            Already have an account? <a href="/login">Login</a>
        </div>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(135deg, #6a11cb, #2575fc);
    }

    .login-box {
        background: #fff;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 400px;
        text-align: center;
    }

    .login-box h2 {
        margin-bottom: 1.5rem;
        color: #333;
    }

    .form-group {
        margin-bottom: 1rem;
        text-align: left;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #555;
    }

    .form-group input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 1rem;
    }

    .btn-primary {
        width: 100%;
        padding: 0.75rem;
        background: #2575fc;
        border: none;
        border-radius: 5px;
        color: #fff;
        font-size: 1rem;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .btn-primary:hover {
        background: #1b5fd9;
    }

    .alert-danger {
        margin-top: 1rem;
        padding: 0.75rem;
        background: #ffebee;
        border: 1px solid #ffcdd2;
        border-radius: 5px;
        color: #c62828;
    }

    .signup-link {
        margin-top: 1rem;
        color: #666;
    }

    .signup-link a {
        color: #2575fc;
        text-decoration: none;
    }

    .signup-link a:hover {
        text-decoration: underline;
    }
</style>

@code {
    private string firstName = "";
    private string lastName = "";
    private string email = "";
    private string password = "";
    private string confirmPassword = "";
    private string errorMessage = "";

    private async Task HandleRegister()
    {
        Console.WriteLine("clicked");
        if (string.IsNullOrEmpty(firstName) || string.IsNullOrEmpty(lastName) ||
            string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password) ||
            string.IsNullOrEmpty(confirmPassword))
        {
            errorMessage = "All fields are required.";
            Console.WriteLine(errorMessage);
            return;
        }

        if (password != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            Console.WriteLine(errorMessage);
            return;
        }

        var user = new User
        {
            FirstName = firstName,
            LastName = lastName,
            UserName = email,
            Email = email
        };

        var result = await UserManager.CreateAsync(user, password);

        if (result.Succeeded)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            Console.WriteLine(errorMessage);
        }
    }
}